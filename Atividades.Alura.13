{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPPSbm4CAbd6VDIrm+NHoO6"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0bPbtVsbTLDh","executionInfo":{"status":"ok","timestamp":1748107069474,"user_tz":180,"elapsed":29,"user":{"displayName":"Vagner Lucas","userId":"06836765070910394095"}},"outputId":"8178a181-0d7e-4c98-d5f5-296cc1afd4f2"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","[ Vagner ]\n","O valor a ser sacado deve ser um número positivo.\n","Você não possui saldo suficiente para concluir esta operação.\n","O valor a ser depositado deve ser um número positivo.\n","\n","[ Eduardo ]\n","Saldo restante de Eduardo: R$99.90\n","\n","[ Rafael ]\n","O valor a ser depositado deve ser um número positivo.\n","Você não possui saldo suficiente para concluir esta operação.\n"]}],"source":["# Exceção personalizada\n","class SaldoInsuficienteError(RuntimeError):\n","    pass\n","\n","\n","# Classe base Conta\n","class Conta:\n","    def __init__(self, numero, titular, saldo=0.0):\n","        self._numero = numero\n","        self._titular = titular\n","        self._saldo = saldo\n","\n","    def deposita(self, valor):\n","        if valor < 0:\n","            raise ValueError('Você tentou depositar um valor negativo.')\n","        self._saldo += valor\n","\n","    def saca(self, valor):\n","        if valor < 0:\n","            raise ValueError('Você tentou sacar um valor negativo.')\n","        if self._saldo < valor:\n","            raise SaldoInsuficienteError('Saldo insuficiente.')\n","        self._saldo -= valor\n","\n","    def get_saldo(self):\n","        return self._saldo\n","\n","\n","# Conta Corrente\n","class ContaCorrente(Conta):\n","    def saca(self, valor):\n","        if valor < 0:\n","            raise ValueError('Você tentou sacar um valor negativo.')\n","        if self._saldo < valor + 0.10:\n","            raise SaldoInsuficienteError('Saldo insuficiente.')\n","        self._saldo -= (valor + 0.10)\n","\n","\n","# Conta Poupança\n","class ContaPoupanca(Conta):\n","    def deposita(self, valor):\n","        if valor < 0:\n","            raise ValueError('Você tentou depositar um valor negativo.')\n","        self._saldo += valor\n","\n","\n","# Testes\n","if __name__ == '__main__':\n","    # Teste com Vagner\n","    cc_vagner = ContaCorrente('001', 'Vagner', 1000.0)\n","\n","    print(\"\\n[ Vagner ]\")\n","    try:\n","        cc_vagner.saca(-100.0)\n","    except ValueError:\n","        print('O valor a ser sacado deve ser um número positivo.')\n","\n","    try:\n","        cc_vagner.saca(2000.0)\n","    except ValueError:\n","        print('O valor a ser sacado deve ser um número positivo.')\n","    except SaldoInsuficienteError:\n","        print('Você não possui saldo suficiente para concluir esta operação.')\n","\n","    try:\n","        cc_vagner.deposita(-500.0)\n","    except ValueError:\n","        print('O valor a ser depositado deve ser um número positivo.')\n","\n","    # Teste com Eduardo\n","    cc_eduardo = ContaCorrente('002', 'Eduardo', 1500.0)\n","\n","    print(\"\\n[ Eduardo ]\")\n","    try:\n","        cc_eduardo.saca(1400.0)\n","        print(f'Saldo restante de Eduardo: R${cc_eduardo.get_saldo():.2f}')\n","    except Exception as e:\n","        print(f'Erro: {e}')\n","\n","    # Teste com Rafael\n","    cp_rafael = ContaPoupanca('003', 'Rafael', 500.0)\n","\n","    print(\"\\n[ Rafael ]\")\n","    try:\n","        cp_rafael.deposita(-100)\n","    except ValueError:\n","        print('O valor a ser depositado deve ser um número positivo.')\n","\n","    try:\n","        cp_rafael.saca(700)\n","    except SaldoInsuficienteError:\n","        print('Você não possui saldo suficiente para concluir esta operação.')\n"]}]}