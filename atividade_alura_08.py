# -*- coding: utf-8 -*-
"""atividade.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dTynhJhiVfOxIPZMQ2AIJMank_LrHBTJ
"""



"""1Crie uma pasta chamada oo em sua workspace e crie um arquivo chamado teste_conta.py"""

import os

os.makedirs('oo', exist_ok=True)

file_path = 'oo/teste_conta.py'

conteudo = """
class Conta:
    def __init__(self, titular, saldo=0):
        self.titular = titular
        self.saldo = saldo

    def depositar(self, valor):
        self.saldo += valor

    def sacar(self, valor):
        if valor <= self.saldo:
            self.saldo -= valor
            return True
        return False

    def consultar_saldo(self):
        return self.saldo
"""

with open(file_path, 'w') as f:
    f.write(conteudo)

print(f"Arquivo criado em: {file_path}")

"""2.Crie a função chamada cria_conta(), que recebe como argumento numero, titular, saldo e limite"""

def cria_conta(numero, titular, saldo, limite):
    conta = {
        'numero': numero,
        'titular': titular,
        'saldo': saldo,
        'limite': limite
    }
    return conta

"""3.Dentro de cria_conta(), crie uma variável do tipo dicionário chamada conta com as chaves recebendo os valores dos parâmetros (numero, titular, saldo e limite), e ao final, retorne a conta"""

def cria_conta(numero, titular, saldo, limite):
    conta = {"numero": numero, "titular": titular, "saldo": saldo, "limite": limite}
    return conta

"""4.Crie uma função chamada deposita() no mesmo arquivo teste_conta.py que recebe como argumento uma conta e um valor. Dentro da função, adicione o valor ao saldo da conta"""

def cria_conta(numero, titular, saldo, limite):
    conta = {"numero": numero, "titular": titular, "saldo": saldo, "limite": limite}
    return conta

def deposita(conta, valor):
    conta['saldo'] += valor

"""5.Crie outra função chamada saca() que recebe como argumento uma conta e um valor. Dentro da função, subtraia o valor do saldo da conta"""

def cria_conta(numero, titular, saldo, limite):
    conta = {"numero": numero, "titular": titular, "saldo": saldo, "limite": limite}
    return conta

def deposita(conta, valor):
    conta['saldo'] += valor

def saca(conta, valor):
    conta['saldo'] -= valor

"""6.E por fim, crie uma função chamada extrato(), que recebe como argumento uma conta e imprime o numero e o saldo"""

def cria_conta(numero, titular, saldo, limite):
    conta = {"numero": numero, "titular": titular, "saldo": saldo, "limite": limite}
    return conta

def deposita(conta, valor):
    conta['saldo'] += valor

def saca(conta, valor):
    conta['saldo'] -= valor

def extrato(conta):
    print("numero: {} \nsaldo: {}".format(conta['numero'], conta['saldo']))

"""7.Navegue até a pasta oo , digite os comandos no arquivo teste_conta.py e teste as funcionalidades"""

import os
import sys

os.makedirs('oo', exist_ok=True)

codigo = """
def cria_conta(numero, titular, saldo, limite):
    conta = {"numero": numero, "titular": titular, "saldo": saldo, "limite": limite}
    return conta

def deposita(conta, valor):
    conta['saldo'] += valor

def saca(conta, valor):
    conta['saldo'] -= valor

def extrato(conta):
    print("numero: {} \\nsaldo: {}".format(conta['numero'], conta['saldo']))
"""

with open('oo/teste_conta.py', 'w') as f:
    f.write(codigo)

sys.path.append('./oo')

import teste_conta

conta = teste_conta.cria_conta('123-7', 'João', 500.0, 1000.0)
teste_conta.deposita(conta, 50.0)
teste_conta.extrato(conta)

teste_conta.saca(conta, 20.0)
teste_conta.extrato(conta)

"""8.(Opcional) Acrescente uma documentação para o seu módulo teste_conta.py e utilize a função help() para testá-la."""

import os
import sys

os.makedirs('oo', exist_ok=True)

codigo = '''
"""
Módulo teste_conta.py

Este módulo contém funções para criar e manipular contas bancárias simples,
incluindo criação, depósito, saque e exibição de extrato.
"""

def cria_conta(numero, titular, saldo, limite):
    """
    Cria uma conta bancária.

    Args:
        numero (str): Número da conta.
        titular (str): Nome do titular da conta.
        saldo (float): Saldo inicial da conta.
        limite (float): Limite da conta.

    Returns:
        dict: Dicionário representando a conta.
    """
    conta = {"numero": numero, "titular": titular, "saldo": saldo, "limite": limite}
    return conta

def deposita(conta, valor):
    """
    Deposita um valor na conta.

    Args:
        conta (dict): Conta onde o depósito será realizado.
        valor (float): Valor a ser depositado.
    """
    conta['saldo'] += valor

def saca(conta, valor):
    """
    Realiza um saque na conta.

    Args:
        conta (dict): Conta onde o saque será realizado.
        valor (float): Valor a ser sacado.
    """
    conta['saldo'] -= valor

def extrato(conta):
    """
    Imprime o número e saldo da conta.

    Args:
        conta (dict): Conta a ser exibida.
    """
    print("numero: {} \\nsaldo: {}".format(conta['numero'], conta['saldo']))
'''

with open('oo/teste_conta.py', 'w') as f:
    f.write(codigo)

sys.path.append('./oo')

import teste_conta

help(teste_conta)
help(teste_conta.cria_conta)
help(teste_conta.deposita)
help(teste_conta.saca)
help(teste_conta.extrato)

"""1.Crie um arquivo chamado conta.py na pasta oo criada no exercício anterior."""

import os
import sys

os.makedirs('oo', exist_ok=True)

codigo_conta = '''
class Conta:

    def __init__(self, numero, titular, saldo, limite):
        self.numero = numero
        self.titular = titular
        self.saldo = saldo
        self.limite = limite

    def deposita(self, valor):
        self.saldo += valor

    def saca(self, valor):
        if self.saldo < valor:
            return False
        else:
            self.saldo -= valor
            return True

    def extrato(self):
        print("numero: {} \\nsaldo: {}".format(self.numero, self.saldo))

    def transfere_para(self, destino, valor):
        retirou = self.saca(valor)
        if retirou == False:
            return False
        else:
            destino.deposita(valor)
            return True
'''

with open('oo/conta.py', 'w') as f:
    f.write(codigo_conta)

codigo_teste = '''
from conta import Conta

conta1 = Conta('123-4', 'João', 120.0, 1000.0)
conta2 = Conta('567-8', 'Maria', 200.0, 1000.0)

conta1.deposita(50.0)
conta1.extrato()

conta1.saca(20.0)
conta1.extrato()

sucesso = conta1.transfere_para(conta2, 100.0)
print("Transferência realizada?", sucesso)

conta1.extrato()
conta2.extrato()
'''

with open('oo/conta_teste.py', 'w') as f:
    f.write(codigo_teste)

sys.path.append('./oo')

get_ipython().system('python3 oo/conta_teste.py')